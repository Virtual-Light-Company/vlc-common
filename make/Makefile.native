#
# Makefile rules and useful functions for wide use
#

#
# Directories for standard stuff
#
include $(PROJECT_ROOT)/make/Makefile.inc	 

NATIVE_DEV_ROOT = $(SRC_DIR)/native

NATIVE_SRC_DIR  = $(NATIVE_DEV_ROOT)
DESTINATION   = $(SRC_DIR)/obj

#
# Built up tool information
#
CC=gcc

EMPTY         =
SPACE         = $(EMPTY) $(EMPTY)

#
# Option listing for the various commands
#
CC_OPTIONS = 

#
# Build rules.
#

LIB_LIST_CLEAN     = $(patsubst %,$(NATIVE_SRC_DIR)/%/.clean,$(LIB_LIST))
LIB_LIST_BUILD     = $(patsubst %,$(NATIVE_SRC_DIR)/%/.build,$(LIB_LIST))

#
# General build rules
#

# Rule 0. Applied when make is called without targets.
all: $(OBJ_FILES) $(OTHER_FILES)


# Rule 2. Change ".build" tag to "Makefile", thus call the package makefile 
# which in turn recalls this makefile with target all (rule 10).
%.build :
	 $(MAKE) -k -f $(subst .build,Makefile,$@) all

# Rule 3. Call rule 2 for every package
buildall : $(PLIST_BUILD)               
	 $(PRINT) Done build.

#
# Specific dependency build rules
#

# Rule 4. Building a .class file from a .java file
$(LIB_DIR)/%.o : $(NATIVE_SRC_DIR)/$(PACKAGE_LOC)/%.c
	$(PRINT) Compiling %.c
	@ $(CC) $(CC_OPTIONS) $< 

# Rule 5. Building a .class file from a .java file. Invokes rule 1.
%.o : $(NATIVE_SRC_DIR)/$(LIB_LOC)/%.c
	 $(MAKE) -k $(LIB_DIR)/$@

# 
# Cleanups
#

# Rule 8. Remove all produced files (except javadoc)
cleanall :
	 $(DELETE) $(DESTINATION_DIR)/*.o $(OTHER_FILES)


# Rule 9. Change ".clean" tag to "Makefile", thus call the package makefile 
# which in turn recalls this makefile with target cleanall (rule 8).
%.clean :
	 $(MAKE) -k -f $(subst .clean,Makefile,$@) cleanall


# Rule 10: Call rule 9 for every package directory
clean : $(PLIST_CLEAN)
	 $(PRINT) Done clean.

# Rule to build everything
complete : clean buildall 

